{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_sample>>\n\n    @pytest.fixture(scope=\"class\")\n    def setup(request):\n        print(\"setup\")\n        request.cls.allure_util = AllureReport(None)\n        request.cls.config = Config()\n        request.cls.generic_util = GenericUtils()\n        request.cls.observation_df = ExcelUtils().excel_to_df(fhir_requirement_path, observation_excel_sheet)\n        request.cls.non_observation_df = ExcelUtils().excel_to_df(fhir_requirement_path, non_observation_excel_sheet)\n        request.cls.fhir_json = read_fhir_json()\n>       request.cls.model_output_json = read_model_output_json()\n\nconftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:48: in read_model_output_json\n    model_output_contents = json.load(file)\n/usr/lib/python3.10/json/__init__.py:293: in load\n    return loads(fp.read(),\n/usr/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f5b04fac850>\ns = 'Viewer\\nText\\n \\nPaste\\t\\n \\n \\nCopy\\t\\n \\n \\nFormat\\t\\n \\n \\nRemove white space\\t\\n \\n \\nClear\\t\\n \\n \\nLoad JSON da...sion\": \"3.1.14\",\\n  \"timestamp\": \"2024-02-12 08:00:00.483490+00:00\",\\n  \"valid_cxr\": true,\\n  \"valid_frontal\": true\\n}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/usr/lib/python3.10/json/decoder.py:355: JSONDecodeError\n", "test_name": "test_sample", "rerun": "0"}}, "suite_name": "tests/cxr/fhir_validation/test_keys.py"}}}, "date": "February 18, 2024", "start_time": 1708280879.6036575, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}