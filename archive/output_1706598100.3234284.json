{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 6}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'container_auto' for <Function test_fhir_obs_code[input_path_TC222]>>\n\n    @pytest.fixture(scope=\"class\", params = [\"input_path_TC222\"])\n    def container_auto(request):\n    \n        input_path_param = request.param\n        input_path = Config().get_value_of_test_input_key(input_path_param)\n        output_path = GenericUtils().output_folder_generator()\n        DockerUtils().container_autorun(input_path=input_path, output_path=output_path)\n        DockerUtils().check_container_logs()\n        request.cls.fhir_input_path = input_path\n        request.cls.fhir_output_path = output_path\n        Config().update_value_of_config_key(\"fhir_json_path\",output_path)\n    \n        # Check if \"Annalise-cxr-FHIR.json\" is available in the output_path\n        fhir_file_path = os.path.join(output_path, \"Annalise-cxr-FHIR.json\")\n    \n    \n        if os.path.exists(fhir_file_path):\n            request.cls.fhir_contents = GenericUtils().parse_json_file(fhir_file_path)\n    \n        else:\n            # If the JSON file is not available, provide a message\n>           raise FileNotFoundError(f\"Annalise-cxr-FHIR.json not available in the output_path\")\nE           FileNotFoundError: Annalise-cxr-FHIR.json not available in the output_path\n\nconftest.py:63: FileNotFoundError\n", "test_name": "test_fhir_obs_code[input_path_TC222]", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'container_auto' for <Function test_fhir_obs_code[input_path_TC222]>>\n\n    @pytest.fixture(scope=\"class\", params = [\"input_path_TC222\"])\n    def container_auto(request):\n    \n        input_path_param = request.param\n        input_path = Config().get_value_of_test_input_key(input_path_param)\n        output_path = GenericUtils().output_folder_generator()\n        DockerUtils().container_autorun(input_path=input_path, output_path=output_path)\n        DockerUtils().check_container_logs()\n        request.cls.fhir_input_path = input_path\n        request.cls.fhir_output_path = output_path\n        Config().update_value_of_config_key(\"fhir_json_path\",output_path)\n    \n        # Check if \"Annalise-cxr-FHIR.json\" is available in the output_path\n        fhir_file_path = os.path.join(output_path, \"Annalise-cxr-FHIR.json\")\n    \n    \n        if os.path.exists(fhir_file_path):\n            request.cls.fhir_contents = GenericUtils().parse_json_file(fhir_file_path)\n    \n        else:\n            # If the JSON file is not available, provide a message\n>           raise FileNotFoundError(f\"Annalise-cxr-FHIR.json not available in the output_path\")\nE           FileNotFoundError: Annalise-cxr-FHIR.json not available in the output_path\n\nconftest.py:63: FileNotFoundError\n", "test_name": "test_fhir_obs_display[input_path_TC222]", "rerun": "0"}, "2": {"status": "ERROR", "message": "request = <SubRequest 'container_auto' for <Function test_fhir_obs_code[input_path_TC222]>>\n\n    @pytest.fixture(scope=\"class\", params = [\"input_path_TC222\"])\n    def container_auto(request):\n    \n        input_path_param = request.param\n        input_path = Config().get_value_of_test_input_key(input_path_param)\n        output_path = GenericUtils().output_folder_generator()\n        DockerUtils().container_autorun(input_path=input_path, output_path=output_path)\n        DockerUtils().check_container_logs()\n        request.cls.fhir_input_path = input_path\n        request.cls.fhir_output_path = output_path\n        Config().update_value_of_config_key(\"fhir_json_path\",output_path)\n    \n        # Check if \"Annalise-cxr-FHIR.json\" is available in the output_path\n        fhir_file_path = os.path.join(output_path, \"Annalise-cxr-FHIR.json\")\n    \n    \n        if os.path.exists(fhir_file_path):\n            request.cls.fhir_contents = GenericUtils().parse_json_file(fhir_file_path)\n    \n        else:\n            # If the JSON file is not available, provide a message\n>           raise FileNotFoundError(f\"Annalise-cxr-FHIR.json not available in the output_path\")\nE           FileNotFoundError: Annalise-cxr-FHIR.json not available in the output_path\n\nconftest.py:63: FileNotFoundError\n", "test_name": "test_obs_bodsite_code[input_path_TC222]", "rerun": "0"}, "3": {"status": "ERROR", "message": "request = <SubRequest 'container_auto' for <Function test_fhir_obs_code[input_path_TC222]>>\n\n    @pytest.fixture(scope=\"class\", params = [\"input_path_TC222\"])\n    def container_auto(request):\n    \n        input_path_param = request.param\n        input_path = Config().get_value_of_test_input_key(input_path_param)\n        output_path = GenericUtils().output_folder_generator()\n        DockerUtils().container_autorun(input_path=input_path, output_path=output_path)\n        DockerUtils().check_container_logs()\n        request.cls.fhir_input_path = input_path\n        request.cls.fhir_output_path = output_path\n        Config().update_value_of_config_key(\"fhir_json_path\",output_path)\n    \n        # Check if \"Annalise-cxr-FHIR.json\" is available in the output_path\n        fhir_file_path = os.path.join(output_path, \"Annalise-cxr-FHIR.json\")\n    \n    \n        if os.path.exists(fhir_file_path):\n            request.cls.fhir_contents = GenericUtils().parse_json_file(fhir_file_path)\n    \n        else:\n            # If the JSON file is not available, provide a message\n>           raise FileNotFoundError(f\"Annalise-cxr-FHIR.json not available in the output_path\")\nE           FileNotFoundError: Annalise-cxr-FHIR.json not available in the output_path\n\nconftest.py:63: FileNotFoundError\n", "test_name": "test_study_uid[input_path_TC222]", "rerun": "0"}, "4": {"status": "ERROR", "message": "request = <SubRequest 'container_auto' for <Function test_fhir_obs_code[input_path_TC222]>>\n\n    @pytest.fixture(scope=\"class\", params = [\"input_path_TC222\"])\n    def container_auto(request):\n    \n        input_path_param = request.param\n        input_path = Config().get_value_of_test_input_key(input_path_param)\n        output_path = GenericUtils().output_folder_generator()\n        DockerUtils().container_autorun(input_path=input_path, output_path=output_path)\n        DockerUtils().check_container_logs()\n        request.cls.fhir_input_path = input_path\n        request.cls.fhir_output_path = output_path\n        Config().update_value_of_config_key(\"fhir_json_path\",output_path)\n    \n        # Check if \"Annalise-cxr-FHIR.json\" is available in the output_path\n        fhir_file_path = os.path.join(output_path, \"Annalise-cxr-FHIR.json\")\n    \n    \n        if os.path.exists(fhir_file_path):\n            request.cls.fhir_contents = GenericUtils().parse_json_file(fhir_file_path)\n    \n        else:\n            # If the JSON file is not available, provide a message\n>           raise FileNotFoundError(f\"Annalise-cxr-FHIR.json not available in the output_path\")\nE           FileNotFoundError: Annalise-cxr-FHIR.json not available in the output_path\n\nconftest.py:63: FileNotFoundError\n", "test_name": "test_fhir_tracking_id[input_path_TC222]", "rerun": "0"}, "5": {"status": "ERROR", "message": "request = <SubRequest 'container_auto' for <Function test_fhir_obs_code[input_path_TC222]>>\n\n    @pytest.fixture(scope=\"class\", params = [\"input_path_TC222\"])\n    def container_auto(request):\n    \n        input_path_param = request.param\n        input_path = Config().get_value_of_test_input_key(input_path_param)\n        output_path = GenericUtils().output_folder_generator()\n        DockerUtils().container_autorun(input_path=input_path, output_path=output_path)\n        DockerUtils().check_container_logs()\n        request.cls.fhir_input_path = input_path\n        request.cls.fhir_output_path = output_path\n        Config().update_value_of_config_key(\"fhir_json_path\",output_path)\n    \n        # Check if \"Annalise-cxr-FHIR.json\" is available in the output_path\n        fhir_file_path = os.path.join(output_path, \"Annalise-cxr-FHIR.json\")\n    \n    \n        if os.path.exists(fhir_file_path):\n            request.cls.fhir_contents = GenericUtils().parse_json_file(fhir_file_path)\n    \n        else:\n            # If the JSON file is not available, provide a message\n>           raise FileNotFoundError(f\"Annalise-cxr-FHIR.json not available in the output_path\")\nE           FileNotFoundError: Annalise-cxr-FHIR.json not available in the output_path\n\nconftest.py:63: FileNotFoundError\n", "test_name": "test_fhir_tracking_uid[input_path_TC222]", "rerun": "0"}}, "suite_name": "tests/cxr/fhir_validation/test_fhir.py"}}}, "date": "January 30, 2024", "start_time": 1706586789.9401858, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "6", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "6"}