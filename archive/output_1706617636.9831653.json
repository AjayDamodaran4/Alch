{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'setup' for <Function test_fhir_tracking_id>>\n\n    @pytest.fixture(scope=\"class\")\n    def setup(request):\n        print(\"setup\")\n        request.cls.allure_util = AllureReport(None)\n        request.cls.config = Config()\n        request.cls.generic_util = GenericUtils()\n        request.cls.observation_df = ExcelUtils().excel_to_df(fhir_requirement_path, observation_excel_sheet)\n        request.cls.non_observation_df = ExcelUtils().excel_to_df(fhir_requirement_path, non_observation_excel_sheet)\n>       request.cls.fhir_json = read_fhir_json()\n\nconftest.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:32: in read_fhir_json\n    fhir_contents = json.load(file)\n/usr/lib/python3.10/json/__init__.py:293: in load\n    return loads(fp.read(),\n/usr/lib/python3.10/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/usr/lib/python3.10/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x7f4484ce0850>\ns = '{\\n  \"resourceType\": \"DiagnosticReport\",\\n  \"id\": \"40320d6f-ddc7-4a94-8f52-d931fada53c8\",\\n  \"contained\": [\\n    {\\n ...n      \"reference\": \"#6594272c-06b1-4d4b-b902-9f54a012427d\"\\n    }\\n  ],\\n  \"conclusion\": \"Annalise generated FHIR\"\\n}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 396 column 15 (char 10496)\n\n/usr/lib/python3.10/json/decoder.py:353: JSONDecodeError\n", "test_name": "test_fhir_tracking_id", "rerun": "0"}}, "suite_name": "tests/cxr/fhir_validation/test_fhir.py"}}}, "date": "January 30, 2024", "start_time": 1706617610.731078, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}